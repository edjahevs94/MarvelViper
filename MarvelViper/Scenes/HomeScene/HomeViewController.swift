//
//  HomeViewController.swift
//  MarvelViper
//
//  Created by Edgard Vargas on 19/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit

class HomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
   
    var interactor: HomeInteractor!
    var router: HomeRouter!

    // MARK: - Object variables

    // NOTE: Only store objects here if required
    private var heroes: [HomeScene.fetchHeroes.ViewModel.DisplayHero] = []
    private var spinner : UIActivityIndicatorView!

    // MARK: - Inteface objects

    let tableView: UITableView = {
       let table = UITableView()
        table.frame = .zero
        table.translatesAutoresizingMaskIntoConstraints = false
        table.register(HomeTableViewCell.self, forCellReuseIdentifier: HomeTableViewCell.identifier)
        table.register(TableHeader.self, forHeaderFooterViewReuseIdentifier: "header")
        return table
    }()
    
    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
       
        title = "Home"
        view.backgroundColor = .white
        makeSpinner()
       
        dofetchHeroes()
      
        tableView.dataSource = self
        tableView.delegate = self
        view.addSubview(tableView)
        view.addSubview(spinner)
        setupView()
    }

    func makeSpinner(){
            let spinner = UIActivityIndicatorView()
            
            spinner.hidesWhenStopped = true
            spinner.isHidden = false
            spinner.translatesAutoresizingMaskIntoConstraints = false
            
            self.spinner = spinner
        }
    
    func setupView() {
        // NOTE: Setup the view on load
    
        spinner.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        spinner.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        
        NSLayoutConstraint(item: tableView, attribute: .top, relatedBy: .equal, toItem: view.safeAreaLayoutGuide, attribute: .top, multiplier: 1, constant: 0).isActive = true
        NSLayoutConstraint(item: tableView, attribute: .bottom, relatedBy: .equal, toItem: view.safeAreaLayoutGuide, attribute: .bottom, multiplier: 1, constant: 0).isActive = true
        NSLayoutConstraint(item: tableView, attribute: .right, relatedBy: .equal, toItem: view, attribute: .right, multiplier: 1, constant: 0).isActive = true
        NSLayoutConstraint(item: tableView, attribute: .left, relatedBy: .equal, toItem: view, attribute: .left, multiplier: 1, constant: 0).isActive = true
        
    }

    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func testApi() {
        MarvelService.shared.getCharacters { result in
            print(result)
        }
    }
    
    func dofetchHeroes() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        spinner.startAnimating()
        interactor.dofetchHeroes(request: HomeScene.fetchHeroes.Request())
    }

    // MARK: - Display logic

    func displayfetchHeroes(viewModel: HomeScene.fetchHeroes.ViewModel) {
        // NOTE: Display the result from the Presenter
        // NOTE: Stop loading animation here
        spinner.stopAnimating()
        heroes = viewModel.displayedHeroes
        tableView.reloadData()
    }
    
    func displayAlertError(viewModel: HomeScene.AlertError.ViewModel) {
        // NOTE: Stop loading animation here
        let alert = UIAlertController(title: "Error", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    // MARK: - TableView DataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return heroes.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let heroe = heroes[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: HomeTableViewCell.identifier, for: indexPath) as! HomeTableViewCell
        cell.heroe = heroe
        return cell
    }

    // MARK: - TableView Delegate Methods

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        router.navigateToHero(heroId: heroes[indexPath.row].id)
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let header = tableView.dequeueReusableHeaderFooterView(withIdentifier: "header") as? TableHeader
        header?.configure(heroes: heroes, router: router)
        return header
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 120
    }
    
    
   
    
}

class TableHeader: UITableViewHeaderFooterView, UICollectionViewDelegate, UICollectionViewDataSource {
    static let identifier = "header"
    
    var arrayHeroes: [HomeScene.fetchHeroes.ViewModel.DisplayHero] = []
    var headerRouter: HomeRouter!
    
    
    let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumInteritemSpacing = 30
        layout.itemSize = CGSize(width: 100, height: 100)
        let collection = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collection.translatesAutoresizingMaskIntoConstraints = false
        //collection.backgroundColor = .systemGray
        collection.register(HomeCollectionCollectionViewCell.self,
                            forCellWithReuseIdentifier: HomeCollectionCollectionViewCell.identifier)
        return collection
    }()
    
    let headerImage: UIImageView = {
       let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        imageView.image = UIImage(named: "ImageSample")
        return imageView
    }()

    override init(reuseIdentifier: String?) {
        super.init(reuseIdentifier: reuseIdentifier)
        collectionView.delegate = self
        collectionView.dataSource = self
        //contentView.addSubview(headerImage)
        contentView.addSubview(collectionView)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func configure(heroes: [HomeScene.fetchHeroes.ViewModel.DisplayHero], router: HomeRouter) {
      
        headerRouter = router
        arrayHeroes = heroes
        collectionView.reloadData()

    }
    

    
    
    override func layoutSubviews() {
        super.layoutSubviews()
                
        
                NSLayoutConstraint(item: collectionView, attribute: .top, relatedBy: .equal, toItem: contentView.safeAreaLayoutGuide, attribute: .top, multiplier: 1, constant: 0).isActive = true
                NSLayoutConstraint(item: collectionView, attribute: .right, relatedBy: .equal, toItem: contentView, attribute: .right, multiplier: 1, constant: 0).isActive = true
                NSLayoutConstraint(item: collectionView, attribute: .left, relatedBy: .equal, toItem: contentView, attribute: .left, multiplier: 1, constant: 0).isActive = true
                NSLayoutConstraint(item: collectionView, attribute: .bottom, relatedBy: .equal, toItem: contentView.safeAreaLayoutGuide, attribute: .bottom, multiplier: 1, constant: 0).isActive = true
        
        
        
    }
    
    
    
    // MARK: - CollectionView Delegate Methods
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        arrayHeroes.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HomeCollectionCollectionViewCell.identifier, for: indexPath) as! HomeCollectionCollectionViewCell
        
        cell.hero = arrayHeroes[indexPath.row]
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        headerRouter.navigateToHero(heroId: arrayHeroes[indexPath.row].id)
    }

}




