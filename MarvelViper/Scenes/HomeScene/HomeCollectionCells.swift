//
//  HomeCollectionCells.swift
//  MarvelViper
//
//  Created by Edgard Vargas on 21/08/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit
import SDWebImage

class HomeCollectionCollectionViewCell: UICollectionViewCell {

    static let identifier = "HomeCollectionCollectionViewCell"

    
    let resourceLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.font = .systemFont(ofSize: 10)
        label.lineBreakMode = .byWordWrapping
        label.numberOfLines = 3
        label.text = "label"
        
        return label
    }()
    
    let resourceImage: UIImageView = {
       let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFill
        imageView.clipsToBounds = true // par que se pegue a los limites de la celda
        return imageView
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        contentView.backgroundColor = .white
        contentView.addSubview(resourceLabel)
        contentView.addSubview(resourceImage)
        
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    var hero: HomeScene.fetchHeroes.ViewModel.DisplayHero! {
        didSet {
            // Configure cell from object
            // iconImageView.image = displayedSomething.image
            resourceLabel.text = hero.name
            resourceImage.sd_setImage(with: URL(string: hero.photo))
        }
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        //resourceLabel.widthAnchor.constraint(equalToConstant: 120).isActive = true
        //resourceLabel.heightAnchor.constraint(equalToConstant: 120).isActive = true
        resourceImage.heightAnchor.constraint(equalToConstant: 70).isActive = true
        resourceImage.topAnchor.constraint(equalTo: contentView.safeAreaLayoutGuide.topAnchor, constant: 2).isActive = true
        resourceImage.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 5).isActive = true
        resourceImage.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -5).isActive = true
        
        
        resourceLabel.topAnchor.constraint(equalTo: resourceImage.bottomAnchor, constant: 2).isActive = true
        resourceLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 5).isActive = true
        resourceLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -5).isActive = true
        resourceLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -5).isActive = true
       
        
    }

}
